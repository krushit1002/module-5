MODULE: 5 (Database)
 Topics Covered
Basics of Database
1. What do you understand By Database
A database is an electronically stored, systematic collection of data. It can contain any type of data, including words, 
numbers,images, videos, and files. You can use software called a database management system (DBMS) to store, retrieve, and 
edit data.In computer systems, the word database can also refer to any DBMS, to the database system, or to an application
associated with the database.

2. What is Normalization?
Normalization is the process of organizing data in a database. It includes creating tables and establishing relationships
between those tables according to rules designed both to protect the data and to make the database more flexible by eliminating
redundancy and inconsistent dependency.

3. What is Difference between DBMS and RDBMS?
DBMS
Data is stored in a database management system (DBMS) as a file
Data is stored in a database management system (DBMS) in either a navigational or hierarchical format
Only a single user is supported by the DBMS
The data in a typical database may not be stored according to the ACID model
This can lead to database discrepancies
It is an application that is used to manage databases over computer networks as well as the system hard drives
Software and hardware requirements are minimal
The integrity constraints are not supported by DBMS
At the file level, the integrity constraints are not imposed
Normalization is not supported by DBMS.
Distributed databases are not supported by DBMS
The DBMS system is mostly used to manage tiny amounts of data
Dbms only meet seven of Dr E.F. Codd’s rules
Client-server architecture is not supported by DBMS
For complicated and vast amounts of data, data retrieval takes longer
In this architecture, data redundancy is common
There is no correlation between the data
There is no sense of safety
Individual data items must be accessed
A file system, XML, the Windows Registry, and other DBMS are examples

RDBMS
Tables are used to store information
RDBMS employs a tabular format, with column names as headers and associated data as rows
It may be used by numerous people
Relational databases are more difficult to create, but they are more consistent and organised
They follow the rules of ACID (Atomicity, Consistency, Isolation, Durability)
The database systems are used to keep track of the relationships between the tables
Higher hardware and software requirements are required
At the schema level, RDBMS provides integrity restrictions
Values outside of a certain range cannot be stored in the RDBMS column
A relational database management system (RDBMS) can be normalised.
Distributed databases are supported by RBMS
The RDBMS database is built to manage a vast volume of data
Dbms meet 8 to 10 of Dr E.F. Codd’s rules
Client-server architecture is supported by RDBMS
Because of its relational methodology, data retrieval is quick
Data redundancy is not possible using keys and indexes
Data is kept in the form of tables that are linked together via foreign keys
Multiple security levels are available. At the OS, command, and object levels, log files are produced
SQL queries make it simple to retrieve data
At the same time, many data items can be accessed
MySQL, Oracle, SQL Server, and other RDBMS are examples

4. What is MF Cod Rule of RDBMS Systems?
Rule 0: The foundation rule: For any system that is advertised as, or claimed to be, a relational data base management 
system,
that system must be able to manage data bases entirely through its relational capabilities.
Rule 1: The information rule:
All information in a relational data base is represented explicitly at the logical level and in exactly one way – by values
in tables.
Rule 2: The guaranteed access rule:
Each and every datum (atomic value) in a relational data base is guaranteed to be logically accessible by resorting to a 
combination
of table name, primary key value and column name.
Rule 3: Systematic treatment of null values:
Null values (distinct from the empty character string or a string of blank characters and distinct from zero or any other 
number) are supported in fully relational DBMS for representing missing information and inapplicable information in a 
systematic way, independent of data type.
Rule 4: Dynamic online catalog based on the relational model:
The data base description is represented at the logical level in the same way as ordinary data, so that authorized users 
can apply the same relational language to its interrogation as they apply to the regular data.
Rule 5: The comprehensive data sublanguage rule:
A relational system may support several languages and various modes of terminal use (for example, the fill-in-the-blanks 
mode). However, there must be at least one language whose statements are expressible, per some well-defined syntax, 
as character strings and that is comprehensive in supporting all of the following items:
Data definition.
View definition.
Data manipulation (interactive and by program).
Integrity constraints.
Authorization.
Transaction boundaries (begin, commit and rollback).
Rule 6: The view updating rule:
All views that are theoretically updatable are also updatable by the system.
Rule 7: Relational Operations Rule / Possible for high-level insert, update, and delete:
The capability of handling a base relation or a derived relation as a single operand applies not only to the retrieval of
data but also to the insertion, update and deletion of data.
Rule 8: Physical data independence:
Application programs and terminal activities remain logically unimpaired whenever any changes are made in either storage 
representations or access methods.
Rule 9: Logical data independence:
Application programs and terminal activities remain logically unimpaired when information-preserving changes of any kind
that theoretically permit unimpairment are made to the base tables.
Rule 10: Integrity independence:
Integrity constraints specific to a particular relational data base must be definable in the relational data sublanguage
and storable in the catalog, not in the application programs.
Rule 11: Distribution independence:
The end-user must not be able to see that the data is distributed over various locations. Users should always get the 
impression that the data is located at one site only.
Rule 12: The nonsubversion rule:
If a relational system has a low-level (single-record-at-a-time) language, that low level cannot be used to subvert or 
bypass the integrity rules and constraints expressed in the higher level relational language (multiple-records-at-a-time).

5. What do you understand By Data Redundancy?
Dataredundancy occurs when the same piece of data exists in multiple places, whereas data inconsistency is when the same
data exists in different formats in multiple tables. Unfortunately, data redundancy can cause data inconsistency, which
can provide a company with unreliable and/or meaningless information.

6. What is DDL Interpreter?
DDL Interpreter: It interprets the DDL (Data Definition Language) Instructions and stores the record in a data dictionary
(in a table containing meta-data) Query Optimizer: It executes the DML Instructions and picks the lowest cost evaluation 
plan out of all the alternatives present.


7. What is DML Compiler in SQL?
A DML (data manipulation language) refers to a computer programming language that allows you to add (insert), delete 
(delete), and alter (update) data in a database. A DML is typically a sublanguage of a larger database language like 
SQL, with the DML containing some of the language's operators.


8. What is SQL Key Constraints writing an Example of SQL Key Constraints
SQL constraints are used to specify rules for the data in a table.

Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the
data in the table. If there is any violation between the constraint and the data action, the action is aborted.

Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints 
apply to the whole table.

The following constraints are commonly used in SQL:

NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY - Prevents actions that would destroy links between tables
CHECK - Ensures that the values in a column satisfies a specific condition
DEFAULT - Sets a default value for a column if no value is specified
CREATE INDEX - Used to create and retrieve data from the database very quickly

9. What is save Point? How to create a save Point write a Query?
A SAVEPOINT is a point in a transaction in which you can roll the transaction back to a certain point without rolling back 
the entire transaction.Syntax for Savepoint command: SAVEPOINT SAVEPOINT_NAME; This command is used only in the creation
of SAVEPOINT among all the transactions

10.What is trigger and how to create a Trigger in SQL?
An SQL trigger is a database object that is associated with a table and automatically executes a set of SQL statements
when a specific event occurs on that table. Triggers are used to enforce business rules, maintain data integrity, and 
automate certain actions within a database.

The CREATE TRIGGER statement creates a new trigger in a database. ...
CREATE TRIGGER trigger-name before-or-after ins-upd-del ON table-name.
[ ORDER number ]
[ REFERENCING referencing-alias ] FOR EACH ROW.
[ WHEN proc-search-condition ] proc-stmt.
trigger-name ::= user-defined-name.
before-or-after ::= BEFORE | AFTER.

Topics Covered
SQL Queries
1. Create Table Name : Student and Exam
syntax
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);
example
CREATE TABLE Persons (
    PersonID int,
    LastName varchar(255),
    FirstName varchar(255),
    Address varchar(255),
    City varchar(255)
);

2. Create table given below: Employee and IncentiveTable
Syntax:
CREATE TABLE table_name(
    column_name1 data_type [NULL|NOT NULL],
    column_name2 data_type [NULL|NOT NULL],
    ...
);
SQL Script: Create Table Copy
CREATE TABLE Employee(
    EmpId integer, 
    FirstName varchar(20), 
    LastName varchar(20), 
    Email varchar(25), 
    PhoneNo varchar(25), 
    Salary integer
);
SQL Script: Create Table with Primary Key Copy
CREATE TABLE Employee (
    EmpId integer PRIMARY KEY, 
    FirstName varchar(20), 
    LastName varchar(20), 
    Email varchar(25), 
    PhoneNo varchar(25), 
    Salary integer
);
SQL Script: Create Table in Oracle Copy
CREATE TABLE Employee(
    EmpId number PRIMARY KEY,
    FirstName varchar2(20),
    LastName varchar2(20),
    Email varchar2(25),
    PhoneNo varchar2(25),
    Salary number(8)
);

3. Get First_Name from employee table using Tom name “Employee Name”.


4. Get FIRST_NAME, Joining Date, and Salary from employee table.
-- This SQL query retrieves the first name of employees, the current date, their hire date, and calculates their years of 
employment.

SELECT 
    FIRST_NAME, -- Selecting the 'FIRST_NAME' column from the 'employees' table.
SYSDATE(), -- Retrieving the current date using the SYSDATE() function.
    HIRE_DATE, -- Selecting the 'HIRE_DATE' column from the 'employees' table.
DATEDIFF(SYSDATE(), hire_date)/365 -- Calculating the difference in days between the current date and the hire date, then
 dividing by 365 to get years of employment.
FROM 
employees; -- Specifying the 'employees' table.
EMPLOYEE_ID | FIRST_NAME  | LAST_NAME   | EMAIL    | PHONE_NUMBER       | HIRE_DATE  | JOB_ID     | SALARY   | COMMISSION_PCT | MANAGER_ID | DEPARTMENT_ID |
+-------------+-------------+-------------+----------+--------------------+------------+------------+----------+----------------+------------+---------------+
|         100 | Steven      | King        | SKING    | 515.123.4567       | 1987-06-17 | AD_PRES    | 24000.00 |           0.00 |          0 |   		  90 |
|         101 | Neena       | Kochhar     | NKOCHHAR | 515.123.4568       | 1987-06-18 | AD_VP      | 17000.00 |           0.00 |        100 |            90 |
|         102 | Lex         | De Haan     | LDEHAAN  | 515.123.4569       | 1987-06-19 | AD_VP      | 17000.00 |           0.00 |        100 |            90 |
|         103 | Alexander   | Hunold      | AHUNOLD  | 590.423.4567       | 1987-06-20 | IT_PROG    |  9000.00 |           0.00 |        102 |            60 |
|         104 | Bruce       | Ernst       | BERNST   | 590.423.4568       | 1987-06-21 | IT_PROG    |  6000.00 |           0.00 |        103 |            60 |
|         105 | David       | Austin      | DAUSTIN  | 590.423.4569       | 1987-06-22 | IT_PROG    |  4800.00 |           0.00 |        103 |            60 

5. Get all employee details from the employee table order by First_Name
Ascending and Salary descending?
-- Selecting all columns from the employees table
SELECT * 
-- Selecting data from the employees table
FROM employees 
-- Ordering the result set by the first_name column in descending order
ORDER BY first_name DESC;
Sample table: employees
+-------------+-------------+-------------+----------+--------------------+------------+------------+----------+----------------+------------+---------------+
| EMPLOYEE_ID | FIRST_NAME  | LAST_NAME   | EMAIL    | PHONE_NUMBER       | HIRE_DATE  | JOB_ID     | SALARY   | COMMISSION_PCT | MANAGER_ID | DEPARTMENT_ID |
+-------------+-------------+-------------+----------+--------------------+------------+------------+----------+----------------+------------+---------------+
|         100 | Steven      | King        | SKING    | 515.123.4567       | 1987-06-17 | AD_PRES    | 24000.00 |           0.00 |          0 |   		  90 |
|         101 | Neena       | Kochhar     | NKOCHHAR | 515.123.4568       | 1987-06-18 | AD_VP      | 17000.00 |           0.00 |        100 |            90 |
|         102 | Lex         | De Haan     | LDEHAAN  | 515.123.4569       | 1987-06-19 | AD_VP      | 17000.00 |           0.00 |        100 |            90 |
|         103 | Alexander   | Hunold      | AHUNOLD  | 590.423.4567       | 1987-06-20 | IT_PROG    |  9000

6. Get employee details from employee table whose first name contains ‘J’.
-- Selecting all columns ('*') from the 'employees' table
-- Filtering the results based on the condition that 'first_name' contains 'D', 'S', or 'N'
-- Sorting the results in descending order of 'salary'
SELECT *
-- Specifying the table to retrieve data from ('employees')
FROM employees
-- Filtering the results based on multiple 'first_name' conditions using LIKE
-- The conditions are 'first_name' contains 'D', 'S', or 'N'
WHERE first_name LIKE '%D%'
   OR first_name LIKE '%S%'
   OR first_name LIKE '%N%'
-- Sorting the results in descending order based on 'salary'
ORDER BY salary DESC;


7. Get department wise maximum salary from employee table order by


8. salaryascending?
// Create a new database
CREATE DATABASE EmployeeDB;
// Use the new database
USE EmployeeDB;
// Create a table to store employees
CREATE TABLE Employees (
   EmployeeID INT PRIMARY KEY,
   Name VARCHAR(255),
   Salary DECIMAL(18, 2)
);
INSERT INTO Employees (EmployeeID, Name, Salary)
VALUES (1, 'John Smith', 50000),
   (2, 'Jane Doe', 60000),
   (3, 'Bob Johnson', 55000),
   (4, 'Sara Lee', 65000),
   (5, 'Mark Brown', 70000);
// Display employees in increasing order of salary
SELECT *
FROM Employees
ORDER BY Salary;
// Display employees in descending order of salary
SELECT *
FROM Employees
ORDER BY Salary DESC;


9. Select first_name, incentive amount from employee and incentives table
forthose employees who have incentives and incentive amount greater than
3000
SELECT FIRST_NAME, INCENTIVE_AMOUNT 
FROM EMPLOYEE A INNER JOIN INCENTIVES B 
ON A.EMPLOYEE_ID=B.EMPLOYEE_REF_ID;



10. Create After Insert trigger on Employee table which insert records in
viewtable
CREATE TRIGGER trgEmployeeInsert
ON Employee
FOR INSERT
AS
   INSERT INTO EmpLog(EmployeeID, FirstName, LastName, HireDate, Operation, UpdatedOn, UpdatedBy)
   SELECT EmployeeID, Firstname, LastName, HireDate, 'INSERT', GETDATE(), SUSER_NAME()
   FROM INSERTED;
GO
INSERT INTO Employee
VALUES(101, 'Neena','Kochhar','05-12-2018'),
(112, 'John','King','01-01-2015');
GO
SELECT *
FROM EmpLog
ORDER BY EmployeeID;
GO

11. Create table given below: Salesperson and Customer
-- This query selects specific columns ('salesman.name' with alias "Salesman", 'customer.cust_name', and 'customer.city') 
-- from the 'salesman' and 'customer' tables.
-- It retrieves data where the 'city' column in the 'salesman' table matches the 'city' column in the 'customer' table.
SELECT salesman.name AS "Salesman", customer.cust_name, customer.city
-- Specifies the tables from which to retrieve the data (in this case, 'salesman' and 'customer').
FROM salesman, customer
-- Specifies the condition for joining the tables and filtering the data.
WHERE salesman.city = customer.city;
Sample table: salesman

 salesman_id |    name    |   city   | commission 
-------------+------------+----------+------------
        5001 | James Hoog | New York |       0.15
        5002 | Nail Knite | Paris    |       0.13
        5005 | Pit Alex   | London   |       0.11

Sample table: customer

 customer_id |   cust_name    |    city    | grade | salesman_id 
-------------+----------------+------------+-------+-------------
        3002 | Nick Rimando   | New York   |   100 |        5001
        3007 | Brad Davis     | New York   |   200 |        5001
        3005 | Graham Zusi    | California |   200 |        5002
        3008 | Julian Green   | London     |   300 |        5002
        3004 | Fabian Johnson | Paris      |   300 |        5006

12. Retrieve the below data from above table
Following are examples of SQL SELECT statements:

To select all columns from a table (Customers) for rows where the Last_Name column has Smith for its value, you would send this SELECT statement to the server back end:
SELECT * FROM Customers WHERE Last_Name='Smith';
The server back end would reply with a result set similar to this:

+---------+-----------+------------+
| Cust_No | Last_Name | First_Name |
+---------+-----------+------------+
| 1001    | Smith     | John       |
| 2039    | Smith     | David      |
| 2098    | Smith     | Matthew    |
+---------+-----------+------------+
3 rows in set (0.05 sec)

To return only the Cust_No and First_Name columns, based on the same criteria as above, use this statement:
SELECT Cust_No, First_Name FROM Customers WHERE Last_Name='Smith';
The subsequent result set might look like:

+---------+------------+
| Cust_No | First_Name |
+---------+------------+
| 1001    | John       |
| 2039    | David      |
| 2098    | Matthew    |
+---------+------------+
3 rows in set (0.05 sec)

To make a WHERE clause find inexact matches, add the pattern-matching operator LIKE. The LIKE operator uses the % (percent symbol) wild card to match zero or more characters, and the underscore (_) wild card to match exactly one character. For example:

To select the First_Name and Nickname columns from the Friends table for rows in which the Nickname column contains the string "brain", use this statement:
SELECT First_Name, Nickname FROM Friends WHERE Nickname LIKE '%brain%';
The subsequent result set might look like:

+------------+------------+
| First_Name | Nickname   |
+------------+------------+
| Ben        | Brainiac   |
| Glen       | Peabrain   |  
| Steven     | Nobrainer  |
+------------+------------+
3 rows in set (0.03 sec)

To query the same table, retrieving all columns for rows in which the First_Name column's value begins with any letter and ends with "en", use this statement:
SELECT * FROM Friends WHERE First_Name LIKE '_en';
The result set might look like:


+------------+------------+-----------+
| First_Name | Last_Name  | Nickname  |
+------------+------------+-----------+
| Ben        | Smith      | Brainiac  |
| Jen        | Peters     | Sweetpea  |  
+------------+------------+-----------+
2 rows in set (0.03 sec)

If you used the % wild card instead (for example, '%en') in the example above, the result set might look like:
+------------+------------+-----------+
| First_Name | Last_Name  | Nickname  |
+------------+------------+-----------+
| Ben        | Smith      | Brainiac  |
| Glen       | Jones      | Peabrain  |
| Jen        | Peters     | Sweetpea  |
| Steven     | Griffin    | Nobrainer |  
+------------+------------+-----------+
4 rows in set (0.05 sec)

13.All orders for more than $1000.


14.Names and cities of all salespeople in London with commission
above 0.12 15.All salespeople either in Barcelona or in London
CREATE TABLE salespeople(
    snum INT NOT NULL, 
    sname TEXT, 
    city TEXT, 
    comm INT,
    PRIMARY KEY (snum)
    );

INSERT INTO salespeople(snum, sname, city, comm) 
    VALUES 
    (1001, 'Peel', 'London', .12),
    (1002, 'Serres', 'San Jose', .13),
    (1004, 'Motika', 'London', .11),
    (1007, 'Rafkin', 'Barcelona', .15),
    (1003, 'Alelrod', 'New York', .1);
    
    
CREATE TABLE cust(
    cnum INTEGER, 
    cname TEXT, 
    city TEXT, 
    rating INTEGER,
    snum INTEGER, 
    FOREIGN KEY (snum) REFERENCES salespeople(snum)
    );

INSERT INTO cust(cnum, cname, city, rating, snum) 
    VALUES 
    (2001, 'Hoffman', 'London', 100, 1001),
    (2002, 'Giovanne', 'Rome', 200, 1003),
    (2003, 'Liu', 'San Jose', 300, 1002),
    (2004, 'Grass', 'Berlin', 100, 1002),
    (2006, 'Clemens', 'London', 300, 1007),
    (2008, 'Cisneros', 'San Jose', 300, 1007),
    (2007, 'Pereira', 'Rome', 100, 1004);
  

CREATE TABLE orders(
    onum INT, 
    amt REAL, 
    odate DATE, 
    cnum INT, 
    snum INT,
    FOREIGN KEY (snum) REFERENCES salespeople(snum),
    FOREIGN KEY (cnum) REFERENCES cust(cnum)
    );
    
INSERT INTO orders(onum, amt, odate, cnum, snum) VALUES
    (3001, 18.69, '03-OCT-94', 2008, 1007),
    (3003, 767.19, '03-OCT-94', 2001, 1001),
    (3002, 1900.10, '03-OCT-94', 2007, 1004),
    (3005, 5160.45, '03-OCT-94', 2003, 1002),
    (3006, 1098.16, '04-OCT-94', 2008, 1007),
    (3009, 1713.23, '04-OCT-94', 2002, 1003),
    (3007, 75.75, '05-OCT-94', 2004, 1002),
    (3008, 4723.00, '05-OCT-94', 2006, 1001),
    (3010, 1309.95, '06-OCT-94', 2004, 1002),
    (3011, 9891.88, '06-OCT-94', 2006, 1001);


16. All salespeople with commission between 0.10 and 0.12. (Boundary
valuesshould be excluded).
CREATE TABLE salespeople(
    snum INT NOT NULL, 
    sname TEXT, 
    city TEXT, 
    comm INT,
    PRIMARY KEY (snum)
    );

INSERT INTO salespeople(snum, sname, city, comm) 
    VALUES 
    (1001, 'Peel', 'London', .12),
    (1002, 'Serres', 'San Jose', .13),
    (1004, 'Motika', 'London', .11),
    (1007, 'Rafkin', 'Barcelona', .15),
    (1003, 'Alelrod', 'New York', .1);
    
    
CREATE TABLE cust(
    cnum INTEGER, 
    cname TEXT, 
    city TEXT, 
    rating INTEGER,
    snum INTEGER, 
    FOREIGN KEY (snum) REFERENCES salespeople(snum)
    );

INSERT INTO cust(cnum, cname, city, rating, snum) 
    VALUES 
    (2001, 'Hoffman', 'London', 100, 1001),
    (2002, 'Giovanne', 'Rome', 200, 1003),
    (2003, 'Liu', 'San Jose', 300, 1002),
    (2004, 'Grass', 'Berlin', 100, 1002),
    (2006, 'Clemens', 'London', 300, 1007),
    (2008, 'Cisneros', 'San Jose', 300, 1007),
    (2007, 'Pereira', 'Rome', 100, 1004);
  

CREATE TABLE orders(
    onum INT, 
    amt REAL, 
    odate DATE, 
    cnum INT, 
    snum INT,
    FOREIGN KEY (snum) REFERENCES salespeople(snum),
    FOREIGN KEY (cnum) REFERENCES cust(cnum)
    );
    
INSERT INTO orders(onum, amt, odate, cnum, snum) VALUES
    (3001, 18.69, '03-OCT-94', 2008, 1007),
    (3003, 767.19, '03-OCT-94', 2001, 1001),
    (3002, 1900.10, '03-OCT-94', 2007, 1004),
    (3005, 5160.45, '03-OCT-94', 2003, 1002),
    (3006, 1098.16, '04-OCT-94', 2008, 1007),
    (3009, 1713.23, '04-OCT-94', 2002, 1003),
    (3007, 75.75, '05-OCT-94', 2004, 1002),
    (3008, 4723.00, '05-OCT-94', 2006, 1001),
    (3010, 1309.95, '06-OCT-94', 2004, 1002),
    (3011, 9891.88, '06-OCT-94', 2006, 1001);


17. All customers excluding those with rating <= 100 unless they are located
inRome
Creating sample tables and inserting values.

Create the following tables with the given structures and insert sample data as specified: -

A) SALESPEOPLE

Snum number(4)
Sname varchar2(10)
city varchar2(10)
Comm number(3,2)

Answer:
CREATE TABLE salespeople ( snum number(4), sname varchar2(10), city varchar2(10), comm number(3,2) );

B) CUSTOMERS

Cnum number(4)
Cname varchar2(10)
City varchar2(10)
Rating number(4)
Snum number(4)

Answer:
CREATE TABLE customers ( cnum number(4), cname varchar2(10), city varchar2(10), rating number(4), snum number(4) );

C) ORDERS

Onum number(4)
Amt number(7,2)
Odate date
Cnum number(4)
Snum number(4)

Answer:
CREATE TABLE orders ( onum number(4), amt number(7,2), odate date, cnum number(4), snum number(4) );


SALES PEOPLE

SNUM    SNAME    CITY     COMM

1001    Peel    London     .12
1002    Serres    San Jose    .13
1004  Motika    London     .11
1007    Rifkin    Barcelona    .15
1003    Axelrod  New York    .10


INSERT INTO salespeople
VALUES(&snum,’&name’,’&city’,&comm);


CUSTOMERS


CNUM    CNAME     CITY     RATING    SNUM

2001  Hoffman    London     100    1001
2002  Giovanni    Rome     200    1003
2003    Liu     San Jose    200    1002
2004    Grass     Berlin     300    1002
2006    Clemens    London     100    1001
2008    Cisneros    San Jose    300    1007
2007    Pereira    Rome     100    1004


ORDERS
INSERT INTO customers
VALUES(&cnum,’&cname’,’&city’,&rating,&snum);

ONUM    AMT     ODATE  CNUM SNUM

3001    18.69     03- OCT -1990    2008 1007
3003    767.19     03- OCT -1990    2001 1001
3002    1900.10    03- OCT -1990    2007 1004
3005    5160.45    03- OCT -1990    2003 1002
3006    1098.16    03- OCT -1990    2008 1007
3009    1713.23    04- OCT -1990    2002 1003
3007    75.75     04- OCT -1990    2004 1002
3008    4723.00    05- OCT -1990    2006 1001
3010    1309.95    06- OCT -1990    2004 1002
3011    9891.88    06- OCT -1990    2006 1001


INSERT INTO orders
VALUES(&onum,&amt,’&odate’,&cnum,&snum);

ONUM AMT ODATE CNUM SNUM
INSERT INTO ORDERS
VALUES(3001,18.69,'03-OCT-1990',
                  2008,
                  1007);

INSERT INTO ORDERS
VALUES(3003,767.19,'03- OCT -1990',
                   2001,
                   1001);

INSERT INTO ORDERS
VALUES(3002,1900.10,'03- OCT -1990',
                    2007,
                    1004);

INSERT INTO ORDERS
VALUES(3005,5160.45,'03- OCT -1990',
                    2003,
                    1002);

INSERT INTO ORDERS
VALUES(3006,1098.16,'03- OCT -1990',
                    2008,
                    1007);

INSERT INTO ORDERS
VALUES(3009,1713.23,’04- OCT -1990’,2002,
                                    1003);

INSERT INTO ORDERS
VALUES(3007,75.75,’04- OCT -1990’,2004,
                                  1002);

INSERT INTO ORDERS
VALUES(3008,4723.00,’05- OCT -1990’,2006,
                                    1001);

INSERT INTO ORDERS
VALUES(3010,309.95,’06-OCT -1990’,2004,
                                  1002);

INSERT INTO ORDERS
VALUES(3011,9891.88,’06- OCT -1990’,2006,
                                    1001);


18. Write a SQL statement that displays all the information about all
salespeople
-- This query selects all columns from the 'salesman' table.
SELECT * 
-- Specifies the table from which to retrieve the data (in this case, 'salesman').
FROM salesman;
Sample table: salesman

 salesman_id |    name    |   city   | commission 
-------------+------------+----------+------------
        5001 | James Hoog | New York |       0.15
        5002 | Nail Knite | Paris    |       0.13
        5005 | Pit Alex   | London   |       0.11
        5006 | Mc Lyon    | Paris    |       0.14
        5007 | Paul Adam  | Rome     |       0.13
        5003 | Lauson Hen | San Jose |       0.12


19. From the following table, write a SQL query to find orders that are
delivered by a salesperson with ID. 5001. Return ord_no, ord_date,
purch_amt.
-- This query selects specific columns 'ord_no', 'ord_date', and 'purch_amt' from the 'orders' table.
SELECT ord_no, ord_date, purch_amt
-- Specifies the table from which to retrieve the data (in this case, 'orders').
FROM orders
-- Filters the rows to only include those where the 'salesman_id' column has the value 5001.
WHERE salesman_id = 5001;
Sample table: orders

ord_no      purch_amt   ord_date    customer_id  salesman_id
----------  ----------  ----------  -----------  -----------
70001       150.5       2012-10-05  3005         5002
70009       270.65      2012-09-10  3001         5005
70002       65.26       2012-10-05  3002         5001
70004       110.5       2012-08-17  3009         5003
70007       948.5       2012-09-10  3005         5002



20. From the following table, write a SQL query to select a range of
products whose price is in the range Rs.200 to Rs.600. Begin and end
values are included. Return pro_id, pro_name, pro_price, and pro_com.
Sample table: item_mast
-- This query selects all columns from the 'item_mast' table.
SELECT *
-- Specifies the table from which to retrieve the data (in this case, 'item_mast').
FROM item_mast
-- Filters the rows to only include those where the 'pro_price' column is between 200 and 600 (inclusive).
WHERE pro_price BETWEEN 200 AND 600;
Sample table: item_mast

 PRO_ID PRO_NAME                       PRO_PRICE    PRO_COM
------- ------------------------- -------------- ----------
    101 Mother Board                    3200.00         15
    102 Key Board                        450.00         16
    103 ZIP drive                        250.00         14
    104 Speaker                          550.00         16
    105 Monitor                         5000.00         11

21. From the following table, write a SQL query to calculate the average
price for a manufacturer code of 16. Return avg.
Sample table: item_mast
-- This query calculates the average value of the 'pro_price' column from the 'item_mast' table.
SELECT AVG(pro_price)
-- Specifies the table from which to retrieve the data (in this case, 'item_mast').
FROM item_mast
-- Filters the rows to only include those where the 'pro_com' column has the value 16.
WHERE pro_com = 16;

Sample table: item_mast

 PRO_ID PRO_NAME                       PRO_PRICE    PRO_COM
------- ------------------------- -------------- ----------
    101 Mother Board                    3200.00         15
    102 Key Board                        450.00         16
    103 ZIP drive                        250.00         14
    104 Speaker                          550.00         16
    105 Monitor                         5000.00         11

22. From the following table, write a SQL query to display the pro_name
as 'Item Name' and pro_priceas 'Price in Rs.'
Sample table: item_mast
-- This query selects specific columns and renames them for better readability.
-- It renames the 'pro_name' column to "Item Name" and the 'pro_price' column to "Price in Rs."
SELECT pro_name as "Item Name", pro_price AS "Price in Rs."
-- Specifies the table from which to retrieve the data (in this case, 'item_mast').
FROM item_mast;
Sample table : item_mast

 PRO_ID PRO_NAME                       PRO_PRICE    PRO_COM
------- ------------------------- -------------- ----------
    101 Mother Board                    3200.00         15
    102 Key Board                        450.00         16
    103 ZIP drive                        250.00         14
    104 Speaker                          550.00         16
    105 Monitor                         5000.00         11

23. From the following table, write a SQL query to find the items whose
prices are higher than or equal to $250. Order the result by product price in
descending, then product name in ascending. Return pro_name and
pro_price.
-- This query selects specific columns 'pro_name' and 'pro_price' from the 'item_mast' table.
SELECT pro_name, pro_price
-- Specifies the table from which to retrieve the data (in this case, 'item_mast').
FROM item_mast
-- Filters the rows to only include those where the 'pro_price' column is greater than or equal to 250.
WHERE pro_price >= 250
-- Orders the result set first by 'pro_price' in descending order and then by 'pro_name' in ascending order.
ORDER BY pro_price DESC, pro_name;

Sample table: item_mast

 PRO_ID PRO_NAME                       PRO_PRICE    PRO_COM
------- ------------------------- -------------- ----------
    101 Mother Board                    3200.00         15
    102 Key Board                        450.00         16
    103 ZIP drive                        250.00         14
    104 Speaker                          550.00         16
    105 Monitor                         5000.00         11

24. From the following table, write a SQL query to calculate average
price of the items for each company. Return average price and company
code.
Sample table: item_mast
-- This query calculates the average value of the 'pro_price' column for each distinct value of 'pro_com'.
SELECT AVG(pro_price), pro_com
-- Specifies the table from which to retrieve the data (in this case, 'item_mast').
FROM item_mast
-- Groups the result set by the 'pro_com' column.
GROUP BY pro_com;
Sample table: item_mast

 PRO_ID PRO_NAME                       PRO_PRICE    PRO_COM
------- ------------------------- -------------- ----------
    101 Mother Board                    3200.00         15
    102 Key Board                        450.00         16
    103 ZIP drive                        250.00         14
    104 Speaker                          550.00         16
    105 Monitor                         5000.00         11
